{"ast":null,"code":"var _jsxFileName = \"/Users/Pesto/Desktop/code/graphql-library/client/src/components/AddBook.js\";\nimport React from 'react'; // binds apollo to react\n\nimport { graphql } from 'react-apollo';\nimport { flowRight as compose } from 'lodash';\nimport { getAuthorsQuery, addBookMutation } from '../queries/queries';\n\nconst AddBook = props => {\n  const [bookName, setBookName] = React.useState('');\n  const [bookGenre, setBookGenre] = React.useState('');\n  const [bookAuthor, setBookAuthor] = React.useState('');\n\n  function displayAuthors() {\n    var data = props.getAuthorsQuery;\n\n    if (data.loading) {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }\n      }, \"Loading Authors...\");\n    } else {\n      return data.authors.map(author => /*#__PURE__*/React.createElement(\"option\", {\n        key: author.id,\n        value: author.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 33\n        }\n      }, author.name));\n    }\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    props.addBookMutation({\n      variables: {\n        name: bookName,\n        genre: bookGenre,\n        authorId: bookAuthor\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"add-book\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"Book name:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: event => setBookName(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Genre:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: event => setBookGenre(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Author:\"), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: event => setBookAuthor(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"Select author\"), displayAuthors())), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"+\"));\n}; // integrate getBooksQuery to BookList by storing it in BookList's props\n\n\nexport default compose(graphql(getAuthorsQuery, {\n  name: \"getAuthorsQuery\"\n}), graphql(addBookMutation, {\n  name: \"addBookMutation\"\n}))(AddBook);","map":{"version":3,"sources":["/Users/Pesto/Desktop/code/graphql-library/client/src/components/AddBook.js"],"names":["React","graphql","flowRight","compose","getAuthorsQuery","addBookMutation","AddBook","props","bookName","setBookName","useState","bookGenre","setBookGenre","bookAuthor","setBookAuthor","displayAuthors","data","loading","authors","map","author","id","name","handleSubmit","event","preventDefault","variables","genre","authorId","target","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAS,IAAIC,OAAtB,QAAqC,QAArC;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,oBAAjD;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,KAAK,CAACU,QAAN,CAAe,EAAf,CAAhC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,KAAK,CAACU,QAAN,CAAe,EAAf,CAAlC;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8Bd,KAAK,CAACU,QAAN,CAAe,EAAf,CAApC;;AAEA,WAASK,cAAT,GAA0B;AACtB,QAAIC,IAAI,GAAGT,KAAK,CAACH,eAAjB;;AACA,QAAIY,IAAI,CAACC,OAAT,EAAkB;AACd,0BAAQ;AAAQ,QAAA,QAAQ,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAR;AACH,KAFD,MAEO;AACH,aACID,IAAI,CAACE,OAAL,CAAaC,GAAb,CACKC,MAAD,iBAAY;AAAQ,QAAA,GAAG,EAAEA,MAAM,CAACC,EAApB;AAAwB,QAAA,KAAK,EAAED,MAAM,CAACC,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2CD,MAAM,CAACE,IAAlD,CADhB,CADJ;AAKH;AACJ;;AAED,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzBA,IAAAA,KAAK,CAACC,cAAN;AACAlB,IAAAA,KAAK,CAACF,eAAN,CAAsB;AAClBqB,MAAAA,SAAS,EAAE;AACPJ,QAAAA,IAAI,EAAEd,QADC;AAEPmB,QAAAA,KAAK,EAAEhB,SAFA;AAGPiB,QAAAA,QAAQ,EAAEf;AAHH;AADO,KAAtB;AAOH;;AAED,sBACA;AAAM,IAAA,EAAE,EAAC,UAAT;AAAoB,IAAA,QAAQ,EAAEU,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAIC,KAAD,IAAWf,WAAW,CAACe,KAAK,CAACK,MAAN,CAAaC,KAAd,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,eAOI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAIN,KAAD,IAAWZ,YAAY,CAACY,KAAK,CAACK,MAAN,CAAaC,KAAd,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAPJ,eAYI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI;AAAQ,IAAA,QAAQ,EAAGN,KAAD,IAAWV,aAAa,CAACU,KAAK,CAACK,MAAN,CAAaC,KAAd,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEKf,cAAc,EAFnB,CAFJ,CAZJ,eAoBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SApBJ,CADA;AAyBH,CAvDD,C,CAyDA;;;AACA,eAAeZ,OAAO,CAClBF,OAAO,CAACG,eAAD,EAAkB;AAAEkB,EAAAA,IAAI,EAAE;AAAR,CAAlB,CADW,EAElBrB,OAAO,CAACI,eAAD,EAAkB;AAAEiB,EAAAA,IAAI,EAAE;AAAR,CAAlB,CAFW,CAAP,CAGbhB,OAHa,CAAf","sourcesContent":["import React from 'react'\n// binds apollo to react\nimport { graphql } from 'react-apollo'\nimport { flowRight as compose } from 'lodash'\nimport { getAuthorsQuery, addBookMutation } from '../queries/queries'\n\nconst AddBook = (props) => {\n\n    const [bookName, setBookName] = React.useState('')\n    const [bookGenre, setBookGenre] = React.useState('')\n    const [bookAuthor, setBookAuthor] = React.useState('')\n\n    function displayAuthors() {\n        var data = props.getAuthorsQuery;\n        if (data.loading) {\n            return (<option disabled>Loading Authors...</option>)\n        } else {\n            return (\n                data.authors.map(\n                    (author) => <option key={author.id} value={author.id}>{author.name}</option>\n                )\n            )\n        }\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault()\n        props.addBookMutation({\n            variables: {\n                name: bookName,\n                genre: bookGenre,\n                authorId: bookAuthor\n            }\n        })\n    }\n\n    return (\n    <form id=\"add-book\" onSubmit={handleSubmit}>\n\n        <div className=\"field\">\n            <label>Book name:</label>\n            <input type=\"text\" onChange={ (event) => setBookName(event.target.value)}/>\n        </div>\n\n        <div className=\"field\">\n            <label>Genre:</label>\n            <input type=\"text\" onChange={ (event) => setBookGenre(event.target.value)}/>\n        </div>\n\n        <div className=\"field\">\n            <label>Author:</label>\n            <select onChange={(event) => setBookAuthor(event.target.value)}>\n                <option>Select author</option>\n                {displayAuthors()}\n            </select>\n        </div>\n\n        <button>+</button>\n\n    </form>\n    )\n}\n\n// integrate getBooksQuery to BookList by storing it in BookList's props\nexport default compose (\n    graphql(getAuthorsQuery, { name: \"getAuthorsQuery\"}),\n    graphql(addBookMutation, { name: \"addBookMutation\"})\n)(AddBook);"]},"metadata":{},"sourceType":"module"}