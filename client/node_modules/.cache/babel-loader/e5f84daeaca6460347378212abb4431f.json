{"ast":null,"code":"var _jsxFileName = \"/Users/Pesto/Desktop/code/graphql-library/client/src/components/AddBook.js\";\nimport React from 'react'; // parses query\n\nimport { gql } from 'apollo-boost'; // binds apollo to react\n\nimport { graphql } from 'react-apollo';\nconst getAuthorsQuery = gql`\n    {\n        authors {\n            name\n            id\n        }\n    }\n`;\n\nconst AddBook = props => {\n  function displayAuthors() {\n    var {\n      data\n    } = props;\n\n    if (data.loading) {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }\n      }, \"Loading Authors...\");\n    } else {\n      return data.authors.map(author => /*#__PURE__*/React.createElement(\"option\", {\n        key: author.id,\n        value: author.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 33\n        }\n      }, author.name));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"add-book\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, \"Book name:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, \"Genre:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, \"Author:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, \"Select author\"), displayAuthors())), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"+\"));\n}; // integrate getBooksQuery to BookList by storing it in BookList's props\n\n\nexport default graphql(getAuthorsQuery)(AddBook);","map":{"version":3,"sources":["/Users/Pesto/Desktop/code/graphql-library/client/src/components/AddBook.js"],"names":["React","gql","graphql","getAuthorsQuery","AddBook","props","displayAuthors","data","loading","authors","map","author","id","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB,C,CACA;;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,MAAMC,eAAe,GAAGF,GAAI;;;;;;;CAA5B;;AASA,MAAMG,OAAO,GAAIC,KAAD,IAAW;AAEvB,WAASC,cAAT,GAA0B;AACtB,QAAI;AAAEC,MAAAA;AAAF,QAAWF,KAAf;;AACA,QAAIE,IAAI,CAACC,OAAT,EAAkB;AACd,0BAAQ;AAAQ,QAAA,QAAQ,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAR;AACH,KAFD,MAEO;AACH,aACID,IAAI,CAACE,OAAL,CAAaC,GAAb,CACKC,MAAD,iBAAY;AAAQ,QAAA,GAAG,EAAEA,MAAM,CAACC,EAApB;AAAwB,QAAA,KAAK,EAAED,MAAM,CAACC,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2CD,MAAM,CAACE,IAAlD,CADhB,CADJ;AAKH;AACJ;;AAED,sBACA;AAAM,IAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,eAOI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAPJ,eAYI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEKP,cAAc,EAFnB,CAHJ,CAZJ,eAqBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SArBJ,CADA;AA0BH,CAzCD,C,CA2CA;;;AACA,eAAeJ,OAAO,CAACC,eAAD,CAAP,CAAyBC,OAAzB,CAAf","sourcesContent":["import React from 'react'\n// parses query\nimport { gql } from 'apollo-boost'\n// binds apollo to react\nimport { graphql } from 'react-apollo'\n\nconst getAuthorsQuery = gql`\n    {\n        authors {\n            name\n            id\n        }\n    }\n`\n\nconst AddBook = (props) => {\n\n    function displayAuthors() {\n        var { data } = props;\n        if (data.loading) {\n            return (<option disabled>Loading Authors...</option>)\n        } else {\n            return (\n                data.authors.map(\n                    (author) => <option key={author.id} value={author.id}>{author.name}</option>\n                )\n            )\n        }\n    }\n\n    return (\n    <form id=\"add-book\">\n\n        <div className=\"field\">\n            <label>Book name:</label>\n            <input type=\"text\" />\n        </div>\n\n        <div className=\"field\">\n            <label>Genre:</label>\n            <input type=\"text\" />\n        </div>\n\n        <div className=\"field\">\n            <label>Author:</label>\n            <input type=\"text\" />\n            <select>\n                <option>Select author</option>\n                {displayAuthors()}\n            </select>\n        </div>\n\n        <button>+</button>\n\n    </form>\n    )\n}\n\n// integrate getBooksQuery to BookList by storing it in BookList's props\nexport default graphql(getAuthorsQuery)(AddBook);"]},"metadata":{},"sourceType":"module"}